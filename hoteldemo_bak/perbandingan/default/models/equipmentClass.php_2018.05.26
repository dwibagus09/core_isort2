<?php

require_once('defaultClass.php');
require_once('dbClass.php');

class equipmentClass extends defaultClass
{	
	function getSecurityEquipments() {
		$selTable = new security_equipment_list(array('db'=>'db'));
		$select = $selTable->select();
		$equipments = $selTable->getAdapter()->fetchAll($select);
		return $equipments;
	}
	
	function getPerlengkapanByChiefSecurityReport($id) {
		$securityPerlengkapanTable = new security_equipment_list(array('db'=>'db'));
		
		$select = $securityPerlengkapanTable->getAdapter()->select();
		$select->from(array("sel"=>"security_equipment_list"), array("sel.*"));
		$select->joinLeft(array("se"=>"security_equipment"), "se.security_equipment_list_id=sel.security_equipment_list_id and se.chief_security_report_id = ".$id, array("se.equipment_id","se.chief_security_report_id","se.vendor","se.total_equipment","se.ok_condition","se.bad_condition","se.description"));
		$security = $securityPerlengkapanTable->getAdapter()->fetchAll($select);
		return $security;
	}
	
	function addPerlengkapan($params) {
		$securityPerlengkapanTable = new security_equipment(array('db'=>'db'));
		
		$data = array(
			"chief_security_report_id" => $params["chief_security_report_id"],
			"security_equipment_list_id" => $params["security_equipment_list_id"],
			"vendor" => $params["vendor"],
			"total_equipment" => $params["total_equipment"],
			"ok_condition" => $params["ok_condition"],
			"bad_condition" => $params["bad_condition"],
			"description" => $params["description"]
		);
		$securityPerlengkapanTable->insert($data);
		return $this->db->lastInsertId();
	}
	
	function deletePerlengkapanByChiefSecurityId($chief_security_report_id)
	{
		$securityPerlengkapanTable = new security_equipment(array('db'=>'db'));
		
		if ( is_numeric($chief_security_report_id) && $chief_security_report_id > 0 )
		{		
			$where = $securityPerlengkapanTable->getAdapter()->quoteInto('chief_security_report_id = ?', $chief_security_report_id);
			$securityPerlengkapanTable->delete($where);
		}
	}
	
	function getSafetyEquipments($code="", $safety_report_id = 0) {
		$equipmentTable = new safety_equipment_list(array('db' => 'db')); //use db object from registry

		$select = $equipmentTable->getAdapter()->select();
		$select->from(array("i"=>"safety_equipment_list_items"), array('i.*'));
		$select->joinLeft(array("e"=>"safety_equipment_list"), "e.safety_equipment_list_id=i.safety_equipment_list_id", array("e.*"));
		if($safety_report_id > 0) {
			$select->joinLeft(array("se"=>"safety_equipment"), "se.equipment_item_id=i.equipment_item_id and se.safety_report_id=".$safety_report_id, array("se.status_pressure_cut_in", "se.status_pressure_cut_off", "se.shift2", "se.shift3"));
		}
		if(!empty($code)) {
			if($code == 'ab') $select->where('e.no NOT like "%C%"');
			else $select->where('e.no like "%'.$code.'%"');
		}
		$select->order(array("e.no"));
		return $this->db->fetchAll($select);
	}
	
	function deleteEquipmentBySafetyReportId($safety_report_id)
	{
		$equipmentTable = new safety_equipment(array('db'=>'db'));
		
		if ( is_numeric($safety_report_id) && $safety_report_id > 0 )
		{		
			$where = $equipmentTable->getAdapter()->quoteInto('safety_report_id = ?', $safety_report_id);
			$equipmentTable->delete($where);
		}
	}
	
	function addSafetyEquipment($params) {
		$equipmentTable = new safety_equipment(array('db'=>'db'));
		
		$data = array(
			"safety_report_id" => $params["safety_report_id"],
			"equipment_item_id" => $params["equipment_item_id"],
			"status_pressure_cut_in" => $params["status_pressure_cut_in"],
			"status_pressure_cut_off" => $params["status_pressure_cut_off"],
			"shift2" => $params["shift2"],
			"shift3" => $params["shift3"]
		);
		$equipmentTable->insert($data);
		return $this->db->lastInsertId();
	}
}
?>